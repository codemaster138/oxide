# This file contains yacc-like grammar definitions, but isn't actually used by the code
# I only use it to better wrap my head around how the parser grammars work.
# Syntax:
#                  [      group      ]
#                   [  group  ]
#                        | <- Union
# expr      : term ((PLUS|MINUS) term)* <- “*” matches 0 or more of preceding group or token
# ^           ^      ^Token type ^
# Name        reference          reference

returnExpr  : KEYWORD:return expr
            : expr

expr        : KEYWORD:var IDENTIFIER EQ expr
            : compexpr ((AND|OR) compexpr)*

compexpr    : NOT compexpr
            : arithexpr ((EE|LT|GT|LTE|GTE) arithexpr)*

arithexpr   : term  ((PLUS|MINUS) term)*

term        : factor  ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : atom ((POW|NPOW) atom)*

atom        : (INT|FLOAT|UNDEF)
            : IDENTIFIER (EQ expr)?
            : call
            : (TRUE|FALSE)
            : LPAREN expr RPAREN
            : ifexpr
            : listexpr
            : funcdef

call        : IDENTIFIER LPAREN (expr (COMMA expr)*)? RPAREN

funcdef     : KEYWORD:func IDENTIFIER? LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN block

ifexpr      : KEYWORD:if expr (block|expr) (KEYWORD:else (block|expr))?

block       : (LCURL [expr*] RCURL)

listexpr    : LBRACK expr (COMMA expr)* RBRACK